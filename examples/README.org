* Examples Directory

This file guides you through example files and formatting rules to help you learn and test jbeam-edit’s features hands-on. It includes example JBeam files and JBFL rule files to explore the tool’s capabilities.

** Example JBeam Files

- =fender.jbeam=
  - A simple, clean example JBeam file demonstrating basic parsing and formatting. Running jbeam-edit on this file will:
    - Parse the entire structure including comments
    - Format the file with consistent indentation and spacing
    - Automatically sort and rename nodes sequentially (e.g., "bf1" becomes "bf0", etc.)
    - Update all references accordingly
    - Automatically move vertices into their correct groups (e.g., LeftTree, MiddleTree, RightTree) to maintain proper structure

- =suspension.jbeam=
  - A complex example JBeam file modeling a vehicle suspension assembly. Running jbeam-edit on this file will:
    - Parse all nodes, beams, and collision triangles
    - Sort and rename nodes with attention to structural relationships
    - Update beam references consistently with renamed nodes
    - Maintain groupings and structural integrity for suspension parts
    - Demonstrate the tool’s capabilities on realistic, advanced files

*Note:* This example will gain further advanced features soon, including improved vertex grouping, meta node handling, and better structural transformations as outlined in the [VertexTree Transformation Roadmap](https://github.com/webdevred/jbeam_edit/pull/2).

** JBFL Configuration Files

- =minimal.jbfl=
  Defines a minimal set of formatting rules, focusing on basic indentation and spacing. Ideal for quick, clean formatting without much customization.

- =complex.jbfl=
  Contains detailed rules demonstrating advanced formatting capabilities such as controlling padding, decimal precision, and line breaks using JBFL patterns.

** How JBFL Affects Formatting

JBFL (JBeam Formatting Language) is a declarative mini-language that lets you specify how different parts of the JBeam file should be formatted:

- Match sections of the data tree with wildcard patterns
- Control padding amounts, decimal precision, and newline behavior
- Customize formatting to fit your preferences or project standards

By swapping between the minimal and complex JBFL configs, you can see how formatting behavior changes, making the tool flexible for different workflows.

** Using These Examples

To format an example file with the minimal configuration:

#+BEGIN_SRC bash
jbeam-edit -cminimal
stack exec jbeam-edit -- examples/jbeam/fender.jbeam
#+END_SRC

To try the complex configuration, generate it first and run:

#+BEGIN_SRC bash
jbeam-edit -ccomplex
stack exec jbeam-edit -- examples/jbeam/suspension.jbeam
#+END_SRC

Feel free to modify these examples or create your own to better suit your projects.

These examples provide a practical way to understand and customize how jbeam-edit handles your JBeam files.

For complete documentation and usage, please refer to the root [[file:README.org][README.org]].

There is also [[file:JBFL_DOCS.org][JBFL_DOCS.org]] for detailed information on the JBFL formatting language.
