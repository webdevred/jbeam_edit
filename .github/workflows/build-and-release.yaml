name: Build for release

on:
  push:
    branches: [master]
    tags: [v*]
  pull_request:

jobs:
  get-newest-supported-ghc:
    name: Get the newest supported GHC
    outputs:
      matrix: ${{ steps.add-exp.outputs.matrix }}
    runs-on: ubuntu-latest
    steps:
      - name: Extract the tested GHC versions
        id: get-latest-version
        uses: webdevred/get-tested@4671a0284723f30fa7f97989ff1f9513167180fe
        with:
          cabal-file: jbeam-edit.cabal
          windows-version: latest
          version: get-tested-for-jbeam-edit
          newest: true
      - uses: actions/checkout@v5
      - name: Add experimental flags
        id: add-exp
        shell: bash
        run: |
          echo "$OLD_MATRIX" > matrix.json
          echo "checking input matrix"
          cat matrix.json
          MATRIX="$(bash ./.github/scripts/add_experimental_flags.sh matrix.json jbeam-edit.cabal)"
          echo "checking output matrix"
          echo $MATRIX
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
        env:
          OLD_MATRIX: ${{ steps.get-latest-version.outputs.matrix }}
  build-for-release:
    runs-on: windows-latest
    needs: get-newest-supported-ghc
    name: Build for release for ${{ matrix.ghc }} (${{ matrix.label}})
    strategy:
      matrix: ${{ fromJSON(needs.get-newest-supported-ghc.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v5
      - name: Set up GHC latest and Cabal
        id: setup-ghc
        uses: haskell-actions/setup@v2.8.2
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: latest
          cabal-update: true
      - name: Configure
        run: bash ./.github/scripts/configure_project.sh
        env:
          GITHUB_REF: ${{ github.ref }}
          LABEL: ${{ matrix.label }}
          MATRIX_FLAGS: ${{ matrix.flags }}
      - name: Freeze and check dependencies
        env:
          CABAL_PROJECT: cabal.project.release
        shell: bash
        run: bash ./.github/scripts/freeze_dependencies.sh
      - name: Cache GHC, Cabal store, and build artifacts
        uses: actions/cache@v4.3.0
        if: "!startsWith(github.ref, 'refs/tags/')"
        with:
          path: |
            dist-newstyle
            ${{ steps.setup-ghc.outputs.cabal-store }}
          key: >-
            ${{ runner.os }}-cabal-${{
              matrix.ghc
            }}-${{
              matrix.label
            }}-${{
              hashFiles('**/dist-newstyle/**/plan.json')
            }}
          restore-keys: |
            ${{ runner.os }}-cabal-${{ matrix.ghc }}-${{ matrix.label }}
            ${{ runner.os }}-cabal-${{ matrix.ghc }}-
      - name: Build dependencies, good to do separate for caching
        run: cabal build --project-file cabal.project.release --only-dependencies
      - name: Build executables
        run: cabal build exe:jbeam-edit --project-file cabal.project.release
      - name: Run tests (GHC ${{ matrix.ghc }})
        if: "!startsWith(github.ref, 'refs/tags/')"
        run: cabal test --project-file cabal.project.release
      - name: Enforce CRLF newlines on windows
        run: bash ./.github/scripts/replace_newlines.sh
        shell: bash
      - name: Test executable
        shell: bash
        run: bash ./.github/scripts/prepare_installer.sh
        env:
          RELEASE_DIR: dist/release
          ZIP_DIR: dist/zip_temp
          DIST_NEWSTYLE: dist-newstyle
          CABAL_FILE: jbeam-edit.cabal
          LABEL: ${{ matrix.label}}
      - name: Upload build artifact
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4.6.2
        with:
          name: jbeam-edit-${{ matrix.ghc }}-${{ matrix.label }}
          path: dist
  prepare-for-release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: windows-latest
    needs: [build-for-release, get-newest-supported-ghc]
    name: Prepare release for Windows
    strategy:
      matrix: ${{ fromJSON(needs.get-newest-supported-ghc.outputs.matrix) }}
    env:
      RELEASE_DIR: ./dist/release
      ZIP_DIR: ./dist/zip_temp
    steps:
      - uses: actions/checkout@v5
      - name: Download build artifact
        uses: actions/download-artifact@v5.0.0
        with:
          name: jbeam-edit-${{ matrix.ghc }}-${{ matrix.label }}
          path: dist
      - name: Build Inno Setup Installer
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.7
        with:
          path: installer/setup.iss
          options: /O+
      - name: Prepare release
        shell: bash
        run: bash ./.github/scripts/prepare_release.sh
        env:
          LABEL: ${{ matrix.label}}
      - name: Upload zip artifact
        uses: actions/upload-artifact@v4
        with:
          name: jbeam-edit-${{ github.ref_name }}-${{ matrix.label }}.zip
          path: dist/jbeam-edit-${{ github.ref_name }}-${{ matrix.label }}.zip
  release:
    runs-on: windows-latest
    needs: [prepare-for-release]
    if: startsWith(github.ref, 'refs/tags/')
    name: Release for Windows
    steps:
      - uses: actions/checkout@v5
      - name: Download all prepared zip artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: jbeam-edit-${{ github.ref_name }}-*.zip
          path: dist
      - name: Collect zip files to single folder
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist_flat
          find dist -type f -name '*.zip' -print0 | xargs -0 -I{} mv {} dist_flat/
          ls -la dist_flat
      - name: Create GitHub Release and upload zips
        uses: softprops/action-gh-release@v2.3.4
        with:
          tag_name: ${{ github.ref_name }}
          draft: true
          generate_release_notes: true
          files: dist_flat/*.zip
