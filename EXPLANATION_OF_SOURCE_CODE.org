When the application starts in [[app/Main.hs][app/Main.hs]] it reads the jbeam file that I intend to process like this:

#+begin_src haskell
  contents <- BL.readFile filename
#+end_src

BL is the module alias for Data.ByteString.Lazy. A Lazy ByteString is a string type which is specially good to use to when working with file data. For more information regarding string types in Haskell please see https://hasufell.github.io/posts/2024-05-07-ultimate-string-guide.html
I can see that the result of the read operation is bound to the name contents.

** Parsing

After reading the contents of the file I intend to process I proceed to give contents to parseNodes which creates a tree of "Nodes".
#+begin_src haskell
      let nodes = parseNodes (BL.toStrict contents)
#+end_src

Note that the concept of a "Node" here is different from "node" in jbeam, when I mention JBeam nodes in this document I will explicitly call them JBeam nodes or call them Vertices.
In this document when I refer to nodes I mean a datatype I which I have created to represent arrays, objects and scalar inside a JBeam structure.

The Node type is defined as such:

#+begin_src haskell
  type Object = Vector Node

  type ObjectKey = (Node, Node)

  type Array = Vector Node

  data Node
    = Array Array
    | Object Object
    | ObjectKey ObjectKey
    | String Text
    | Number Scientific
    | Bool Bool
    | SinglelineComment Text
    | MultilineComment Text
    | Null
    deriving (Show, Eq)
#+end_src

type declares a type synomom for a already existing type while data declares a new type.
So a Node can be:
- a Array and contain a vector of Nodes
- a Object and contain a vector of Nodes
- a ObjectKey and contain a 2-element tuple (also called a pair) where the the first element is the key and the second is the value
- a String which contains a Text
- a Number which contains a Scientific, a numeric data type which I really like to due to it unlike most other types in many programming languages can express any arbitrary-precision decimal number without rounding errors or losing precision.
- a Bool which contains either True or False
- a MultilineComment or SinglelineComment which contains a Text
- a Null meaning that the node is empty

In Backus-Naur form this holds:

#+begin_src
  (* space is not expressed in Backus-Naur but it is good not note that a separator can be either whitespace or a comma *)
  <node> ::= <array> | <object> | <string> | <number> | <bool> | <null> | <singlelinecomment> | <multilinecomment>
  <newline> ::= "\n" | "\r\n"
  <whitespace-char> ::= <newline> | "\t" | " "
  <separator> ::= <whitespace-char> | ","
  (* array *)
  <array> ::= "[]" | "[" <array_elem> [<separator>] "]"
  <array_elem> ::= <node> | <node> <separator> <array_elem>
  (* object *)
  <object> ::= "{}" | "{" <object_child> [<separator>] "}"
  <object_child> ::= <node> | <node> <separator> <object_child>
  (* number scalar *)
  <digits> ::= <digit> | <digit>
  <number> ::= <digits> | <digits> "." <digits>
  (* string scalar *)
  <chars> ::= <char> | ""
  <string> ::= "\"" <chars> "\""
  (* comments *)
  <singlelinecomment> ::= "//" <chars> <newline>
  <multilinecomment> ::= "/*" <chars> "*/"
  (* bool scalar *)
  <bool> ::= "true" | "false"
  <null> ::= "null"
#+end_src

So in fact Node is a recursive data structure, a type which references itself.

Text is yet a another string type in Haskell which is good fit when doing appends or comparisons which I tend to do quite a lot in this codebase.

I comptemplated using something like [[https://hackage.haskell.org/package/ordered-containers-0.2.4/docs/Data-Map-Ordered.html][OMap]] for the Object but then I realized that I do not only need support pairs of keys and values for the Object case, I also need to support the Object having Comments as direct children.
The parser is currently written using attoaparsec but I are considering to migrate to Megaparsec since Megaparsec has better support implementing error messages which can be given to the end user.

For full access to the parsing code, check the file [[src/Parsing.hs][src/Parsing.hs]]

** NodePaths and NodeCursors

Before proceeding to talk about how we transform and format the Node structure we first need to talk about NodePath and NodeCursors.

NodeCursor is defined like this:
#+begin_src haskell
  data NodeBreadcrumb
  = ArrayIndex Int
  | ObjectIndexAndKey (Int, Text)

newtype NodeCursor =
  NodeCursor (Seq NodeBreadcrumb)
#+end_src

NodePath is defined like this:
#+begin_src haskell
  
data NodeSelector
  = ArrayIndex Int
  | ObjectKey Text
  | ObjectIndex Int

newtype NodePath =
  NodePath (Seq NodeSelector)
#+end_src

So NodeCursor is a Sequence of breadcrumbs add as we transcend deeper into the Node tree.

And a NodePath is a Sequence of selectors to that point out a certain point in a Node tree, either to point at as something when fetching it from Node or to point to something compare that I at a certain point when doing updates.

select takes a Node and a selector. In case the selector matches I get nodes at a certain point in the tree. And queryNodes allows me to chain the Selectors as a NodePath and perform complex queries.

#+begin_src haskell
  select :: NodeSelector -> N.Node -> Maybe N.Node
  select (ArrayIndex i) (N.Array ns) = ns !? i
  select (ObjectKey k) (N.Object ns) = extractValInKey =<< V.find compareKey ns
    where
      compareKey (N.ObjectKey (N.String keyText, _)) = keyText == k
      compareKey _ = False
  select (ObjectIndex i) (N.Object a) = extractValInKey =<< a !? i
  select _ _ = Nothing

  queryNodes :: NodePath -> N.Node -> Maybe N.Node
  queryNodes (NodePath (s :<| p)) n = queryNodes (NodePath p) =<< select s n
  queryNodes (NodePath Empty) n = Just n
#+end_src

This function takes a function f, a breadcrumb b, and a sequence of breadcrumbs wrapped in a NodeCursor, appends the the breadcrumb to the Sequence in the cursor and supplies the cursor to the function f. This is used whenever I update the Node tree to track where in the tree I am so, enabling checking whether I am updating at a certain point in the Node tree.

#+begin_src haskell
  type CursorFun a = NodeCursor -> Node -> a

  applyCrumb :: NodeBreadcrumb -> NodeCursor -> CursorFun a -> Node -> a
  applyCrumb :: NodeBreadcrumb -> NodeCursor -> CursorFun a -> Node -> a
  applyCrumb b (NodeCursor bs) f = f (NodeCursor $ bs :|> b)
#+end_src

Then I use this function to validate to compare whether all the selectors match the corresponding breadcrumb, returning False if either Sequence exhausts prematurely.
#+begin_src haskell
  type SelCrumbCompFun = NP.NodeSelector -> NodeBreadcrumb -> Bool

  compareSB :: SelCrumbCompFun
  compareSB (NP.ObjectKey s) (ObjectIndexAndKey (_, k)) = s == k
  compareSB (NP.ObjectIndex s) (ObjectIndexAndKey (i, _)) = s == i
  compareSB (NP.ArrayIndex s) (ArrayIndex i) = s == i
  compareSB _ _ = False

  comparePathAndCursor :: NP.NodePath -> NodeCursor -> Bool
  comparePathAndCursor (NP.NodePath p) (NodeCursor c) = sameBy compareSB p c

  sameBy :: SelCrumbCompFun -> Seq NP.NodeSelector -> Seq NodeBreadcrumb -> Bool
  sameBy f = go
      where
        go (p :<| ps) (b :<| bs) = f p b && go ps bs
        go ps bs = Seq.null ps && Seq.null bs
#+end_src

A Seqeunce is good choice for NodeCursor since I need to compare the first element of the cursor and the path but when transcending the Node tree I need to append the current breadcrumb.

** Transforming and formattinmg the JBeam structure

Lets take a lot at [[app/Main.hs][app/Main.hs]] again.

#+begin_src haskell
main :: IO ()
main = do
  args <- getArgs
  formattingConfig <- readFormattingConfig
  case L.uncons args of
    Just (filename, _) -> do
      contents <- tryReadFile [] filename
      case contents >>= parseNodes . BL.toStrict of
        Right ns -> processNodes ns formattingConfig
        Left err -> TIO.putStrLn err
    Nothing -> TIO.putStrLn "missing arg filename" 

processNodes :: Node -> RuleSet -> IO ()
processNodes nodes formattingConfig =
  BL.writeFile "hewwu.jbeam"
    . encodeUtf8
    . TL.fromStrict
    . formatNode formattingConfig newCursor
    . transform
    $ nodes
    
readFormattingConfig :: IO RuleSet
readFormattingConfig = do
  contents <- tryReadFile [NoSuchThing] "rules.jbfl"
  case contents >>= parseDSL . BL.toStrict of
    Right rs -> pure rs
    Left err -> TIO.putStrLn err $> newRuleSet
#+end_src haskell

1. So we get the the arguments to the software which contains which contains the filename to process
2. We read the formatting config which is a JBFL ruleset
3. Get the filename, fail with "missing arg filename" error message if filename couldnt be retrieved from arguemnt list
4. Try reading the file. The [] argument to tryReadFile indicates that no failure will be be treated as fine. If any error happens while reading the file, we write a error message.
5. In case reading the file succeeded, parse the JBeam with parseNodes function.
6. processNodes transforms and formats the JBeam reprensentation back to text.

We can see that if reading the rule file were to fail reading, then NoSuchThing wouldnt give a error message. The return value from tryReadFile when it fails with a acceptable error is a empty.

*** Transforming the JBeam structure

TODO: Wrote documenation for Transformation. I wrote documenation on the Transformation module earlier but I scrapped it since the Transformation will need to be rewritten.
