name: jbeam-edit
version: 0.0.2.0
github: webdevred/jbeam-edit
license: BSD-3-Clause
author: webdevred
maintainer: example@example.com
copyright: 2025 webdevred
data-files: examples/jbfl/*.jbfl

extra-source-files:
  - README.md
  - JBFL_DOCS.md
  - examples/README.md
  - examples/jbeam/*.jbeam
  - examples/formatted_jbeam/*.jbeam


category: Command Line, Jbeam, Beamng

synopsis:
  A fast and reliable command-line tool for parsing, formatting, and editing JBeam files, supporting consistent node renaming, reference updating, and JBFL-based formatting.

description: >-
  jbeam-edit is a Haskell-based CLI utility for BeamNG JBeam files. It parses complete JBeam structures, preserves comments and whitespace, formats files consistently, and can automatically rename nodes and update references. Custom formatting rules are supported via JBFL (JBeam Formatting Language). See the README for usage instructions and examples: https://github.com/webdevred/jbeam-edit#readme
tested-with: [GHC == 9.4.7, GHC == 9.6.6]

dependencies:
  - name: base
    version: '>= 4.17 && < 5'
    mixin: [hiding (Prelude)]
  - name: relude
    version: '>= 1.2'
    mixin: [(Relude as Prelude), '']
  - bytestring >= 0.12
  - vector >= 0.13
  - text >= 2.1
  - containers >= 0.6
  - megaparsec >= 9.6
  - scientific >= 0.3
  - directory >= 1.3
  - filepath >= 1.4

default-extensions: [OverloadedStrings, ImportQualifiedPost]

ghc-options:
  - -Wall
  - -Wcompat
  - -Widentities
  - -Wincomplete-record-updates
  - -Wincomplete-uni-patterns
  - -Wmissing-export-lists
  - -Wmissing-home-modules
  - -Wpartial-fields
  - -Wredundant-constraints

flags:
  dump-ast:
    description: Enable building the dump-ast executable
    manual: true
    default: false
  transformation:
    description: Enable transformation (experimental)
    manual: true
    default: false
  lsp-server:
    description: Enable LSP server (experimental)
    manual: true
    default: false
  windows-example-paths:
    description: Use executable-relative example paths (for Windows release builds)
    default: false
    manual: true

internal-libraries:
  jbeam-edit-transformation:
    when:
      condition: flag(transformation)
      then:
        dependencies: [yaml]
      else:
        buildable: false
    source-dirs: src-extra/transformation
    dependencies: [jbeam-edit]

library:
  source-dirs: src
  generated-other-modules: Paths_jbeam_edit
  when:
    - condition: flag(transformation)
      cpp-options: -DENABLE_TRANSFORMATION
    - condition: os(windows) && flag(windows-example-paths)
      cpp-options: -DWINDOWS_EXAMPLE_PATHS

executables:
  jbeam-edit:
    main: Main.hs
    source-dirs: app
    ghc-options: [-threaded, -rtsopts, -with-rtsopts=-N]
    dependencies: [jbeam-edit]
    when:
      - condition: flag(transformation)
        dependencies: [jbeam-edit-transformation]
        cpp-options: -DENABLE_TRANSFORMATION
      - condition: os(windows)
        cpp-options: -DENABLE_WINDOWS_NEWLINES
  jbeam-lsp-server:
    main: Main.hs
    source-dirs: app-extra/jbeam-lsp-server
    ghc-options: [-threaded, -rtsopts, -with-rtsopts=-N]
    dependencies: [jbeam-edit, lsp>=2.7, prettyprinter, aeson-pretty]
  jbeam-edit-dump-ast:
    when:
      condition: (flag(dump-ast) && flag(transformation))
      then:
        dependencies: [pretty-simple, jbeam-edit-transformation]
      else:
        buildable: false
    main: Main.hs
    source-dirs: tools/dump_ast
    ghc-options: [-threaded, -rtsopts, -with-rtsopts=-N]
    dependencies: [jbeam-edit]

tests:
  jbeam-edit-test:
    main: Spec.hs
    source-dirs: test
    ghc-options: [-threaded, -rtsopts, -with-rtsopts=-N]
    dependencies: [jbeam-edit, hspec>=2.11, hspec-megaparsec>=2.2]
    build-tools: [hspec-discover]
    when:
      condition: flag(transformation)
      dependencies: [jbeam-edit-transformation]
      cpp-options: -DENABLE_TRANSFORMATION_TESTS
